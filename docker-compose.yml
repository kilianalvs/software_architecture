services:
  frontend:
    build:
      context: ./front
      dockerfile: Dockerfile
    labels:
      - "traefik.enable=false"
    ports:
      - "3000:80"
    container_name: frontend-container
    environment:
      - REACT_APP_BACKEND_URL=http://localhost:8080
    networks:
      - app-network

  backend:
    build:
      context: ./notfound
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    container_name: backend-container
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - app-network
    depends_on:
      database:
        condition: service_started
  
  backend-tests:
    build:
      context: ./notfound
      dockerfile: Dockerfile.test
    container_name: backend-tests-container
    environment:
      - SPRING_PROFILES_ACTIVE=test
      - SPRING_DATASOURCE_URL=jdbc:postgresql://database:5432/parking_db
      - SPRING_DATASOURCE_DRIVER_CLASS_NAME=org.postgresql.Driver
      - SPRING_DATASOURCE_USERNAME=parking_user
      - SPRING_DATASOURCE_PASSWORD=parking_pass
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=create-drop
      - MAVEN_OPTS=-Xmx1024m
    volumes:
      - maven-cache:/root/.m2
      - ./notfound/src:/app/src:ro
      - ./notfound/pom.xml:/app/pom.xml:ro
    command: ["mvn", "test", "-Dmaven.test.failure.ignore=false"]
    profiles:
      - test
    networks:
      - app-network
    depends_on:
      database:
        condition: service_started

  database:
    image: postgres:15
    container_name: database-container
    environment:
      POSTGRES_DB: parking_db
      POSTGRES_USER: parking_user
      POSTGRES_PASSWORD: parking_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  postgres_data:
  maven-cache: